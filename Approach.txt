The main approach I took to this problem was to break it down to its simplest parts.
Firstly, spliting up the number into numbers before the decimal and after the decimal.
Next would be splitting the number up into groups of 3 digits starting at the end of the number (e.g. ones) and gradually building up to the start of the number (e.g. millions).
This made it easier to add on 'thousands' and 'millions' to the final string by accounting for how many groups of 3 digits the number has.
The first digit was relatively simple as it would represent the amount of hundreds - and it would never exceed 9 - since 10 would result in one thousand.
The second and third digit did prove to be challenging as I had to deal with eleven, twelve, thirteen, etc. So I decided to group one through to nineteen as a whole and draw the line at twenty. I did this because numbers above twenty were non-unique (such as twenty-three, thirty-three) and could be converted using the second and third digit individually. So it was simply accessing the twos array (twenty, thirty) for the second digit and the teens array (one through to nineteen) for the third digit - knowing that third digit would never exceed 9.
Numbers below twenty were unique (such as eleven, twelve), so you needed to sum the second and third digit together before I could convert it.
I could have separated the numbers based on digits (having one through to nine as a separate array to ten through to nineteen) but this would result in more checks to determine which range the digit lies within and an additional array that needs accessing. 
Another issue that arose was the ordering of the word. By starting at the end of then number, I am appending to the final string the smallest part of the numbers first - which would result in an reversed string e.g. 4321 -> three hundred and twenty-one four thousand. To resolve this, I appended a placeholder ({0}) at the very beginning of each groups of 3 digits, right before I begin adding words to the string. This allowed for string formatting to come in handy as I now can insert the converted string at the start of the final string rather than the end.
With C# and ASP.NET, I have been mainly working with console applications at my current position, however this was a fun and new challenge nonetheless. I have previously used Flask Python to develop simple web applications, redirecting and performing HTTPS requests and calls. So the underlying concept was there but now I had to implement it in a different environment. I had to look up tutorials and videos to get me started but after that it was quite easy to pick up.


My main test plan was to test different groups of numbers from one digit, two digits, etc. I also had to test numbers that were on the border of twenty, to make sure that my code picks up twenty-one and not return ten-eleven. Testing with and without decimals was also important. 